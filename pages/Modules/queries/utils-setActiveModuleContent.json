{
  "pluginType": "JS",
  "pluginId": "js-plugin",
  "unpublishedAction": {
    "name": "setActiveModuleContent",
    "fullyQualifiedName": "utils.setActiveModuleContent",
    "datasource": {
      "name": "UNUSED_DATASOURCE",
      "pluginId": "js-plugin",
      "messages": [],
      "isAutoGenerated": false,
      "deleted": false,
      "policies": [],
      "userPermissions": []
    },
    "pageId": "Modules",
    "collectionId": "Modules_utils",
    "actionConfiguration": {
      "timeoutInMillisecond": 10000,
      "paginationType": "NONE",
      "encodeParamsToggle": true,
      "body": "async activeModuleContent => {\n  const contentType = activeModuleContent.type;\n  let content;\n  const moduleContent = await fetchOneCourseModuleContent.run({\n    id: activeModuleContent.id\n  });\n  if (contentType === 'Reading Material') {\n    content = await fetchReadingContent.run({\n      id: activeModuleContent.id\n    });\n  }\n  if (contentType === 'Video') {\n    content = await fetchVideoContent.run({\n      id: activeModuleContent.id\n    });\n  }\n  if (contentType === 'Quiz') {\n    const quiz = await fetchQuizContent.run({\n      id: activeModuleContent.id\n    });\n    const quizQuestions = await fetchQuizQuestions.run({\n      quizId: quiz[0].id\n    });\n    content = [{\n      ...quiz[0],\n      questions: quizQuestions\n    }];\n  }\n  utils.activeModuleContent = {\n    activeModuleContent: moduleContent && moduleContent.length > 0 ? moduleContent.map(c => {\n      return {\n        id: c.id,\n        type: c.content_type,\n        name: c.title,\n        markComplete: c.mark_complete,\n        comment: c.comment\n      };\n    })[0] : undefined,\n    content: content.length > 0 ? content[0] : undefined\n  };\n}",
      "selfReferencingDataPaths": [],
      "jsArguments": [
        {
          "name": "activeModuleContent"
        }
      ],
      "isAsync": true
    },
    "executeOnLoad": false,
    "dynamicBindingPathList": [
      {
        "key": "body"
      }
    ],
    "isValid": true,
    "invalids": [],
    "messages": [],
    "jsonPathKeys": [
      "async activeModuleContent => {\n  const contentType = activeModuleContent.type;\n  let content;\n  const moduleContent = await fetchOneCourseModuleContent.run({\n    id: activeModuleContent.id\n  });\n  if (contentType === 'Reading Material') {\n    content = await fetchReadingContent.run({\n      id: activeModuleContent.id\n    });\n  }\n  if (contentType === 'Video') {\n    content = await fetchVideoContent.run({\n      id: activeModuleContent.id\n    });\n  }\n  if (contentType === 'Quiz') {\n    const quiz = await fetchQuizContent.run({\n      id: activeModuleContent.id\n    });\n    const quizQuestions = await fetchQuizQuestions.run({\n      quizId: quiz[0].id\n    });\n    content = [{\n      ...quiz[0],\n      questions: quizQuestions\n    }];\n  }\n  utils.activeModuleContent = {\n    activeModuleContent: moduleContent && moduleContent.length > 0 ? moduleContent.map(c => {\n      return {\n        id: c.id,\n        type: c.content_type,\n        name: c.title,\n        markComplete: c.mark_complete,\n        comment: c.comment\n      };\n    })[0] : undefined,\n    content: content.length > 0 ? content[0] : undefined\n  };\n}"
    ],
    "userSetOnLoad": false,
    "confirmBeforeExecute": false,
    "policies": [],
    "userPermissions": []
  },
  "id": "Modules_utils.setActiveModuleContent",
  "deleted": false,
  "gitSyncId": "6461caf0d209002373fbd8c0_647ef5282511375bffce63b6"
}