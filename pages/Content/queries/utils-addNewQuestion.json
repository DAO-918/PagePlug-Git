{
  "pluginType": "JS",
  "pluginId": "js-plugin",
  "unpublishedAction": {
    "name": "addNewQuestion",
    "fullyQualifiedName": "utils.addNewQuestion",
    "datasource": {
      "name": "UNUSED_DATASOURCE",
      "pluginId": "js-plugin",
      "messages": [],
      "isAutoGenerated": false,
      "deleted": false,
      "policies": [],
      "userPermissions": []
    },
    "pageId": "Content",
    "collectionId": "Content_utils",
    "actionConfiguration": {
      "timeoutInMillisecond": 10000,
      "paginationType": "NONE",
      "encodeParamsToggle": true,
      "body": "() => {\n  const type = sel_newQuestionType.selectedOptionValue;\n  let question = rte_newQuizQuestion.text;\n  if (type === 'Single Answer') {\n    utils.newQuizQuestions = [...utils.newQuizQuestions, {\n      id: Math.random(),\n      question,\n      answer: inp_newSingleAnswer.text,\n      answerOptions: null\n    }];\n  }\n  if (type === 'True or False') {\n    utils.newQuizQuestions = [...utils.newQuizQuestions, {\n      id: Math.random(),\n      question,\n      answer: rad_newTrueOrFalse.selectedOptionValue,\n      answerOptions: null\n    }];\n  }\n  if (type === 'Multiple choice') {\n    let singleAnswer = '';\n    if (chk_newMultiChoiceAnswerA.isChecked) {\n      if (singleAnswer.length > 0) {\n        singleAnswer += \",\";\n      }\n      singleAnswer += inp_newMultiChoiceA.text;\n    }\n    if (chk_newMultiChoiceAnswerB.isChecked) {\n      if (singleAnswer.length > 0) {\n        singleAnswer += \",\";\n      }\n      singleAnswer += inp_newMultiChoiceB.text;\n    }\n    if (chk_newMultiChoiceAnswerC.isChecked) {\n      if (singleAnswer.length > 0) {\n        singleAnswer += \",\";\n      }\n      singleAnswer += inp_newMultiChoiceC.text;\n    }\n    if (chk_newMultiChoiceAnswerD.isChecked) {\n      if (singleAnswer.length > 0) {\n        singleAnswer += \",\";\n      }\n      singleAnswer += inp_newMultiChoiceD.text;\n    }\n    utils.newQuizQuestions = [...utils.newQuizQuestions, {\n      id: Math.random(),\n      question,\n      answer: singleAnswer,\n      answerOptions: inp_newMultiChoiceA.text + ',' + inp_newMultiChoiceB.text + ',' + inp_newMultiChoiceC.text + ',' + inp_newMultiChoiceD.text\n    }];\n  }\n  resetWidget('rte_newQuizQuestion');\n  resetWidget('sel_addQuizQuestionType');\n}",
      "selfReferencingDataPaths": [],
      "jsArguments": [],
      "isAsync": true
    },
    "executeOnLoad": false,
    "dynamicBindingPathList": [
      {
        "key": "body"
      }
    ],
    "isValid": true,
    "invalids": [],
    "messages": [],
    "jsonPathKeys": [
      "() => {\n  const type = sel_newQuestionType.selectedOptionValue;\n  let question = rte_newQuizQuestion.text;\n  if (type === 'Single Answer') {\n    utils.newQuizQuestions = [...utils.newQuizQuestions, {\n      id: Math.random(),\n      question,\n      answer: inp_newSingleAnswer.text,\n      answerOptions: null\n    }];\n  }\n  if (type === 'True or False') {\n    utils.newQuizQuestions = [...utils.newQuizQuestions, {\n      id: Math.random(),\n      question,\n      answer: rad_newTrueOrFalse.selectedOptionValue,\n      answerOptions: null\n    }];\n  }\n  if (type === 'Multiple choice') {\n    let singleAnswer = '';\n    if (chk_newMultiChoiceAnswerA.isChecked) {\n      if (singleAnswer.length > 0) {\n        singleAnswer += \",\";\n      }\n      singleAnswer += inp_newMultiChoiceA.text;\n    }\n    if (chk_newMultiChoiceAnswerB.isChecked) {\n      if (singleAnswer.length > 0) {\n        singleAnswer += \",\";\n      }\n      singleAnswer += inp_newMultiChoiceB.text;\n    }\n    if (chk_newMultiChoiceAnswerC.isChecked) {\n      if (singleAnswer.length > 0) {\n        singleAnswer += \",\";\n      }\n      singleAnswer += inp_newMultiChoiceC.text;\n    }\n    if (chk_newMultiChoiceAnswerD.isChecked) {\n      if (singleAnswer.length > 0) {\n        singleAnswer += \",\";\n      }\n      singleAnswer += inp_newMultiChoiceD.text;\n    }\n    utils.newQuizQuestions = [...utils.newQuizQuestions, {\n      id: Math.random(),\n      question,\n      answer: singleAnswer,\n      answerOptions: inp_newMultiChoiceA.text + ',' + inp_newMultiChoiceB.text + ',' + inp_newMultiChoiceC.text + ',' + inp_newMultiChoiceD.text\n    }];\n  }\n  resetWidget('rte_newQuizQuestion');\n  resetWidget('sel_addQuizQuestionType');\n}"
    ],
    "userSetOnLoad": false,
    "confirmBeforeExecute": false,
    "policies": [],
    "userPermissions": []
  },
  "id": "Content_utils.addNewQuestion",
  "deleted": false,
  "gitSyncId": "6461caf0d209002373fbd8c0_6482bf9d5262b67a98310182"
}