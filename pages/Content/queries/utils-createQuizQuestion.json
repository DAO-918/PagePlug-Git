{
  "pluginType": "JS",
  "pluginId": "js-plugin",
  "unpublishedAction": {
    "name": "createQuizQuestion",
    "fullyQualifiedName": "utils.createQuizQuestion",
    "datasource": {
      "name": "UNUSED_DATASOURCE",
      "pluginId": "js-plugin",
      "messages": [],
      "isAutoGenerated": false,
      "deleted": false,
      "policies": [],
      "userPermissions": []
    },
    "pageId": "Content",
    "collectionId": "Content_utils",
    "actionConfiguration": {
      "timeoutInMillisecond": 10000,
      "paginationType": "NONE",
      "encodeParamsToggle": true,
      "body": "async () => {\n  let answerOptions = '';\n  let answer = '';\n  if (sel_addQuizQuestionType.selectedOptionValue === 'Multiple choice') {\n    answerOptions = inp_updateMultiChoiceA.text + ',' + inp_updateMultiChoiceB.text + ',' + inp_updateMultiChoiceC.text + ',' + inp_updateMultiChoiceD.text;\n  }\n  if (sel_addQuizQuestionType.selectedOptionValue === 'Single Answer') {\n    answerOptions = inp_updateSingleAnswer.text;\n  }\n  if (sel_addQuizQuestionType.selectedOptionValue === 'True or False') {\n    answerOptions = 'True, False';\n  }\n  if (sel_addQuizQuestionType.selectedOptionValue === 'Single Answer') {\n    answer = inp_updateSingleAnswer.text;\n  }\n  ;\n  if (sel_addQuizQuestionType.selectedOptionValue === 'True or False') {\n    answer = rad_updateBooleanAnswer.selectedOptionValue;\n  }\n  if (sel_addQuizQuestionType.selectedOptionValue === 'Multiple choice') {\n    let singleAnswer = '';\n    if (chk_updateMultiChoiceAnswerA.isChecked) {\n      if (singleAnswer.length > 0) {\n        singleAnswer += \",\";\n      }\n      singleAnswer += inp_updateMultiChoiceA.text;\n    }\n    if (chk_updateMultiChoiceAnswerB.isChecked) {\n      if (singleAnswer.length > 0) {\n        singleAnswer += \",\";\n      }\n      singleAnswer += inp_updateMultiChoiceB.text;\n    }\n    if (chk_updateMultiChoiceAnswerC.isChecked) {\n      if (singleAnswer.length > 0) {\n        singleAnswer += \",\";\n      }\n      singleAnswer += inp_updateMultiChoiceC.text;\n    }\n    if (chk_updateMultiChoiceAnswerD.isChecked) {\n      if (singleAnswer.length > 0) {\n        singleAnswer += \",\";\n      }\n      singleAnswer += inp_updateMultiChoiceD.text;\n    }\n    answer = singleAnswer;\n  }\n  const newQuestionArr = await createQuizQuestion.run({\n    type: sel_addQuizQuestionType.selectedOptionValue,\n    question: rte_updateQuizQuestion.text,\n    quizContentId: utils.moduleContent.content.id,\n    answerOptions,\n    answer\n  });\n  if (newQuestionArr && newQuestionArr.length > 0) {\n    utils.setModuleContent({\n      ...utils.moduleContent,\n      content: {\n        ...utils.moduleContent.content,\n        questions: {\n          ...utils.moduleContent.content.questions,\n          ...newQuestionArr[0]\n        }\n      }\n    });\n  }\n  resetWidget('lst_updateQuiz');\n  await utils.setModuleContent(utils.moduleContent.moduleContent);\n  showAlert('Quiz Question Added!', 'success');\n}",
      "selfReferencingDataPaths": [],
      "jsArguments": [],
      "isAsync": true
    },
    "executeOnLoad": false,
    "dynamicBindingPathList": [
      {
        "key": "body"
      }
    ],
    "isValid": true,
    "invalids": [],
    "messages": [],
    "jsonPathKeys": [
      "async () => {\n  let answerOptions = '';\n  let answer = '';\n  if (sel_addQuizQuestionType.selectedOptionValue === 'Multiple choice') {\n    answerOptions = inp_updateMultiChoiceA.text + ',' + inp_updateMultiChoiceB.text + ',' + inp_updateMultiChoiceC.text + ',' + inp_updateMultiChoiceD.text;\n  }\n  if (sel_addQuizQuestionType.selectedOptionValue === 'Single Answer') {\n    answerOptions = inp_updateSingleAnswer.text;\n  }\n  if (sel_addQuizQuestionType.selectedOptionValue === 'True or False') {\n    answerOptions = 'True, False';\n  }\n  if (sel_addQuizQuestionType.selectedOptionValue === 'Single Answer') {\n    answer = inp_updateSingleAnswer.text;\n  }\n  ;\n  if (sel_addQuizQuestionType.selectedOptionValue === 'True or False') {\n    answer = rad_updateBooleanAnswer.selectedOptionValue;\n  }\n  if (sel_addQuizQuestionType.selectedOptionValue === 'Multiple choice') {\n    let singleAnswer = '';\n    if (chk_updateMultiChoiceAnswerA.isChecked) {\n      if (singleAnswer.length > 0) {\n        singleAnswer += \",\";\n      }\n      singleAnswer += inp_updateMultiChoiceA.text;\n    }\n    if (chk_updateMultiChoiceAnswerB.isChecked) {\n      if (singleAnswer.length > 0) {\n        singleAnswer += \",\";\n      }\n      singleAnswer += inp_updateMultiChoiceB.text;\n    }\n    if (chk_updateMultiChoiceAnswerC.isChecked) {\n      if (singleAnswer.length > 0) {\n        singleAnswer += \",\";\n      }\n      singleAnswer += inp_updateMultiChoiceC.text;\n    }\n    if (chk_updateMultiChoiceAnswerD.isChecked) {\n      if (singleAnswer.length > 0) {\n        singleAnswer += \",\";\n      }\n      singleAnswer += inp_updateMultiChoiceD.text;\n    }\n    answer = singleAnswer;\n  }\n  const newQuestionArr = await createQuizQuestion.run({\n    type: sel_addQuizQuestionType.selectedOptionValue,\n    question: rte_updateQuizQuestion.text,\n    quizContentId: utils.moduleContent.content.id,\n    answerOptions,\n    answer\n  });\n  if (newQuestionArr && newQuestionArr.length > 0) {\n    utils.setModuleContent({\n      ...utils.moduleContent,\n      content: {\n        ...utils.moduleContent.content,\n        questions: {\n          ...utils.moduleContent.content.questions,\n          ...newQuestionArr[0]\n        }\n      }\n    });\n  }\n  resetWidget('lst_updateQuiz');\n  await utils.setModuleContent(utils.moduleContent.moduleContent);\n  showAlert('Quiz Question Added!', 'success');\n}"
    ],
    "userSetOnLoad": false,
    "confirmBeforeExecute": false,
    "policies": [],
    "userPermissions": []
  },
  "id": "Content_utils.createQuizQuestion",
  "deleted": false,
  "gitSyncId": "6461caf0d209002373fbd8c0_64829affa89c1b088d7a0f9f"
}