{
  "pluginType": "JS",
  "pluginId": "js-plugin",
  "unpublishedAction": {
    "name": "updateQuiz",
    "fullyQualifiedName": "utils.updateQuiz",
    "datasource": {
      "name": "UNUSED_DATASOURCE",
      "pluginId": "js-plugin",
      "messages": [],
      "isAutoGenerated": false,
      "deleted": false,
      "policies": [],
      "userPermissions": []
    },
    "pageId": "Content",
    "collectionId": "Content_utils",
    "actionConfiguration": {
      "timeoutInMillisecond": 10000,
      "paginationType": "NONE",
      "encodeParamsToggle": true,
      "body": "async () => {\n  const quiz = lst_updateQuiz.selectedItem;\n  let quizQuestion;\n  if (quiz.type === 'Single Answer') {\n    quizQuestion = {\n      id: quiz.id,\n      answer: inp_updateSingleAnswer.text,\n      answerOptions: null\n    };\n  }\n  ;\n  if (quiz.type === 'True or False') {\n    quizQuestion = {\n      id: quiz.id,\n      answer: rad_updateBooleanAnswer.selectedOptionValue,\n      answerOptions: null\n    };\n  }\n  if (quiz.type === 'Multiple choice') {\n    let answer = '';\n    if (chk_updateMultiChoiceAnswerA.isChecked) {\n      if (answer.length > 0) {\n        answer += \",\";\n      }\n      answer += inp_updateMultiChoiceA.text;\n    }\n    if (chk_updateMultiChoiceAnswerB.isChecked) {\n      if (answer.length > 0) {\n        answer += \",\";\n      }\n      answer += inp_updateMultiChoiceB.text;\n    }\n    if (chk_updateMultiChoiceAnswerC.isChecked) {\n      if (answer.length > 0) {\n        answer += \",\";\n      }\n      answer += inp_updateMultiChoiceC.text;\n    }\n    if (chk_updateMultiChoiceAnswerD.isChecked) {\n      if (answer.length > 0) {\n        answer += \",\";\n      }\n      answer += inp_updateMultiChoiceD.text;\n    }\n    quizQuestion = {\n      id: quiz.id,\n      answer,\n      answerOptions: inp_updateMultiChoiceA.text + ',' + inp_updateMultiChoiceB.text + ',' + inp_updateMultiChoiceC.text + ',' + inp_updateMultiChoiceD.text\n    };\n  }\n  await patchQuizContent.run();\n  await patchQuizQuestion.run(quizQuestion);\n  closeModal('mdl_manageContent');\n  showAlert('Quiz Content Updated!', 'success');\n}",
      "selfReferencingDataPaths": [],
      "jsArguments": [],
      "isAsync": true
    },
    "executeOnLoad": false,
    "dynamicBindingPathList": [
      {
        "key": "body"
      }
    ],
    "isValid": true,
    "invalids": [],
    "messages": [],
    "jsonPathKeys": [
      "async () => {\n  const quiz = lst_updateQuiz.selectedItem;\n  let quizQuestion;\n  if (quiz.type === 'Single Answer') {\n    quizQuestion = {\n      id: quiz.id,\n      answer: inp_updateSingleAnswer.text,\n      answerOptions: null\n    };\n  }\n  ;\n  if (quiz.type === 'True or False') {\n    quizQuestion = {\n      id: quiz.id,\n      answer: rad_updateBooleanAnswer.selectedOptionValue,\n      answerOptions: null\n    };\n  }\n  if (quiz.type === 'Multiple choice') {\n    let answer = '';\n    if (chk_updateMultiChoiceAnswerA.isChecked) {\n      if (answer.length > 0) {\n        answer += \",\";\n      }\n      answer += inp_updateMultiChoiceA.text;\n    }\n    if (chk_updateMultiChoiceAnswerB.isChecked) {\n      if (answer.length > 0) {\n        answer += \",\";\n      }\n      answer += inp_updateMultiChoiceB.text;\n    }\n    if (chk_updateMultiChoiceAnswerC.isChecked) {\n      if (answer.length > 0) {\n        answer += \",\";\n      }\n      answer += inp_updateMultiChoiceC.text;\n    }\n    if (chk_updateMultiChoiceAnswerD.isChecked) {\n      if (answer.length > 0) {\n        answer += \",\";\n      }\n      answer += inp_updateMultiChoiceD.text;\n    }\n    quizQuestion = {\n      id: quiz.id,\n      answer,\n      answerOptions: inp_updateMultiChoiceA.text + ',' + inp_updateMultiChoiceB.text + ',' + inp_updateMultiChoiceC.text + ',' + inp_updateMultiChoiceD.text\n    };\n  }\n  await patchQuizContent.run();\n  await patchQuizQuestion.run(quizQuestion);\n  closeModal('mdl_manageContent');\n  showAlert('Quiz Content Updated!', 'success');\n}"
    ],
    "userSetOnLoad": false,
    "confirmBeforeExecute": false,
    "policies": [],
    "userPermissions": []
  },
  "id": "Content_utils.updateQuiz",
  "deleted": false,
  "gitSyncId": "6461caf0d209002373fbd8c0_64818f9f80fccc2f529ba0e8"
}